{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"/Users/chanki/react/next-blog/pages/blog.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect, useState } from 'react';\n\nvar client = require('contentful').createClient({\n  space: 'szikisnpiddf',\n  accessToken: 'NHo2ByFSfsVvVZpuNEsqdr7aC53bcsA89jOGGzSLYKk'\n});\n\nvar Blog = function Blog() {\n  function fetchEntries() {\n    var entries;\n    return _regeneratorRuntime.async(function fetchEntries$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(client.getEntries());\n\n          case 2:\n            entries = _context.sent;\n\n            if (!entries.items) {\n              _context.next = 5;\n              break;\n            }\n\n            return _context.abrupt(\"return\", entries.items);\n\n          case 5:\n            console.log(\"Error getting Entries for \".concat(contentType.name, \".\"));\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  var _useState = useState([]),\n      posts = _useState[0],\n      setPosts = _useState[1];\n\n  useEffect(function () {\n    function getPosts() {\n      var allPosts;\n      return _regeneratorRuntime.async(function getPosts$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(fetchEntries());\n\n            case 2:\n              allPosts = _context2.sent;\n              setPosts(_toConsumableArray(allPosts));\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n\n    getPosts();\n    posts.length > 0 && console.log(posts);\n  }, []);\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, \"blog\");\n};\n\nexport default Blog;","map":{"version":3,"sources":["/Users/chanki/react/next-blog/pages/blog.js"],"names":["useEffect","useState","client","require","createClient","space","accessToken","Blog","fetchEntries","getEntries","entries","items","console","log","contentType","name","posts","setPosts","getPosts","allPosts","length"],"mappings":";;;;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;AAEA,IAAMC,MAAM,GAAGC,OAAO,CAAC,YAAD,CAAP,CAAsBC,YAAtB,CAAmC;AAC9CC,EAAAA,KAAK,EAAE,cADuC;AAE9CC,EAAAA,WAAW,EAAE;AAFiC,CAAnC,CAAf;;AAKA,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM;AACf,WAAeC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAC0BN,MAAM,CAACO,UAAP,EAD1B;;AAAA;AACUC,YAAAA,OADV;;AAAA,iBAEQA,OAAO,CAACC,KAFhB;AAAA;AAAA;AAAA;;AAAA,6CAE8BD,OAAO,CAACC,KAFtC;;AAAA;AAGIC,YAAAA,OAAO,CAACC,GAAR,qCAAyCC,WAAW,CAACC,IAArD;;AAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADe,kBAOWd,QAAQ,CAAC,EAAD,CAPnB;AAAA,MAORe,KAPQ;AAAA,MAODC,QAPC;;AASfjB,EAAAA,SAAS,CAAC,YAAM;AACZ,aAAekB,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAC2BV,YAAY,EADvC;;AAAA;AACUW,cAAAA,QADV;AAEIF,cAAAA,QAAQ,oBAAKE,QAAL,EAAR;;AAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIAD,IAAAA,QAAQ;AACRF,IAAAA,KAAK,CAACI,MAAN,GAAe,CAAf,IAAoBR,OAAO,CAACC,GAAR,CAAYG,KAAZ,CAApB;AACH,GAPQ,EAON,EAPM,CAAT;AAQA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAKH,CAtBD;;AAwBA,eAAeT,IAAf","sourcesContent":["import { useEffect, useState } from 'react'\n\nconst client = require('contentful').createClient({\n    space: 'szikisnpiddf',\n    accessToken: 'NHo2ByFSfsVvVZpuNEsqdr7aC53bcsA89jOGGzSLYKk'\n})\n\nconst Blog = () => {\n    async function fetchEntries() {\n        const entries = await client.getEntries()\n        if (entries.items) return entries.items\n        console.log(`Error getting Entries for ${contentType.name}.`)\n    }\n\n    const [posts, setPosts] = useState([])\n\n    useEffect(() => {\n        async function getPosts() {\n            const allPosts = await fetchEntries()\n            setPosts([...allPosts])\n        }\n        getPosts()\n        posts.length > 0 && console.log(posts)\n    }, [])\n    return (\n        <div>\n            blog\n        </div>\n    )\n}\n\nexport default Blog;"]},"metadata":{},"sourceType":"module"}
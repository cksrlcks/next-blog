{"ast":null,"code":"var _jsxFileName = \"/Users/chanki/react/next-blog/components/activeLink.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { useRouter } from 'next/router';\nimport Link from 'next/link';\nimport React, { Children } from 'react';\n\nconst ActiveLink = (_ref) => {\n  let {\n    children,\n    activeClassName\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"children\", \"activeClassName\"]);\n\n  const {\n    pathname\n  } = useRouter();\n  const child = Children.only(children);\n  const className = pathname === props.href ? `${activeClassName}` : child.props.className;\n  return __jsx(Link, _extends({}, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }), React.cloneElement(child, {\n    className\n  }));\n};\n\nexport default ActiveLink;","map":{"version":3,"sources":["/Users/chanki/react/next-blog/components/activeLink.js"],"names":["useRouter","Link","React","Children","ActiveLink","children","activeClassName","props","pathname","child","only","className","href","cloneElement"],"mappings":";;;;;;;;;AAAA,SAASA,SAAT,QAA0B,aAA1B;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,MAAMC,UAAU,GAAG,UAA6C;AAAA,MAA5C;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAA4C;AAAA,MAAZC,KAAY;;AAC5D,QAAM;AAAEC,IAAAA;AAAF,MAAeR,SAAS,EAA9B;AACA,QAAMS,KAAK,GAAGN,QAAQ,CAACO,IAAT,CAAcL,QAAd,CAAd;AAEA,QAAMM,SAAS,GACXH,QAAQ,KAAKD,KAAK,CAACK,IAAnB,GACO,GAAEN,eAAgB,EADzB,GAEMG,KAAK,CAACF,KAAN,CAAYI,SAHtB;AAKA,SAAO,MAAC,IAAD,eAAUJ,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAkBL,KAAK,CAACW,YAAN,CAAmBJ,KAAnB,EAA0B;AAAEE,IAAAA;AAAF,GAA1B,CAAlB,CAAP;AACH,CAVD;;AAYA,eAAeP,UAAf","sourcesContent":["import { useRouter } from 'next/router'\nimport Link from 'next/link'\nimport React, { Children } from 'react'\n\nconst ActiveLink = ({ children, activeClassName, ...props }) => {\n    const { pathname } = useRouter()\n    const child = Children.only(children)\n\n    const className =\n        pathname === props.href\n            ? `${activeClassName}`\n            : child.props.className\n\n    return <Link {...props}>{React.cloneElement(child, { className })}</Link>\n}\n\nexport default ActiveLink"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/chanki/react/next-blog/pages/index.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport { useRouter } from 'next/router';\nimport CardList from '../components/cardList';\nimport client from '../config';\nimport styled from 'styled-components';\nimport Pagination from '../components/paginator';\n\nconst calculateRange = length => Array.from({\n  length\n}, (v, k) => k + 1);\n\nfunction Home(props) {\n  const router = useRouter();\n  const total = props.total;\n  const limit = props.limit;\n  const rangeLimit = Math.ceil(total / limit);\n  const range = calculateRange(rangeLimit);\n  const {\n    0: page,\n    1: updatePage\n  } = useState(!!props.page ? props.page : 1);\n  useEffect(() => {\n    // push를 사용하면 클라이언트사이드에서 라우팅을 실행함\n    void router.push({\n      pathname: '/',\n      query: {\n        page: page\n      }\n    });\n  }, [page]);\n  useEffect(() => {\n    var grid = document.querySelector('.grid');\n    var msnry = new Masonry(grid, {\n      itemSelector: '.grid-item'\n    });\n  });\n  /* Pagination 컴포넌트에서의 page state의 변화 감지해서 리랜더링하기*/\n\n  return __jsx(React.Fragment, null, __jsx(CardContainer, {\n    className: \"grid\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, props.items.map(item => __jsx(CardList, {\n    item: item,\n    key: item.sys.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }))), __jsx(\"div\", {\n    className: \"pagination\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, __jsx(Pagination, {\n    handlePaginationChange: event => updatePage(event),\n    range: range,\n    skip: page,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  })));\n}\n\nHome.getInitialProps = async ({\n  query\n}) => {\n  let page = 1; //클라이언트사이드에서 재랜더링되면서 쿼리 파라미터가 입력됫을경우 page값을 업데이트\n\n  if (query.page) {\n    page = parseInt(query.page + '');\n  }\n\n  const limit = 12;\n  const {\n    items,\n    total,\n    skip\n  } = await client.getEntries({\n    order: '-sys.createdAt',\n    skip: (page - 1) * limit,\n    limit\n  });\n  return {\n    page,\n    items,\n    total,\n    skip,\n    limit\n  };\n};\n\nexport default Home;\nconst CardContainer = styled.div.withConfig({\n  displayName: \"pages__CardContainer\",\n  componentId: \"sc-1cl0c4r-0\"\n})([\"padding:2em 0 1em;@media (max-width:968px){padding:0.5em 0;}\"]);","map":{"version":3,"sources":["/Users/chanki/react/next-blog/pages/index.js"],"names":["React","useEffect","useState","useRouter","CardList","client","styled","Pagination","calculateRange","length","Array","from","v","k","Home","props","router","total","limit","rangeLimit","Math","ceil","range","page","updatePage","push","pathname","query","grid","document","querySelector","msnry","Masonry","itemSelector","items","map","item","sys","id","event","getInitialProps","parseInt","skip","getEntries","order","CardContainer","div"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useRouter } from 'next/router';\nimport CardList from '../components/cardList';\nimport client from '../config';\nimport styled from 'styled-components';\nimport Pagination from '../components/paginator';\n\nconst calculateRange = (length) => Array.from({ length }, (v, k) => k + 1);\n\nfunction Home(props) {\n\n    const router = useRouter();\n    const total = props.total;\n    const limit = props.limit;\n    const rangeLimit = Math.ceil(total / limit);\n    const range = calculateRange(rangeLimit);\n    const [page, updatePage] = useState(!!props.page ? props.page : 1);\n\n\n    useEffect(() => {\n        // push를 사용하면 클라이언트사이드에서 라우팅을 실행함\n        void router.push({ pathname: '/', query: { page: page } })\n\n    }, [page])\n\n    useEffect(() => {\n        var grid = document.querySelector('.grid');\n        var msnry = new Masonry(grid, {\n            itemSelector: '.grid-item'\n        });\n    })\n    /* Pagination 컴포넌트에서의 page state의 변화 감지해서 리랜더링하기*/\n    return (\n        <>\n            <CardContainer className=\"grid\">\n                {props.items.map(item => (\n                    <CardList item={item} key={item.sys.id} />\n                ))}\n            </CardContainer>\n            <div className=\"pagination\">\n                <Pagination handlePaginationChange={(event) => updatePage(event)} range={range} skip={page} />\n            </div>\n        </>\n    )\n}\n\nHome.getInitialProps = async ({ query }) => {\n\n    let page = 1;\n    //클라이언트사이드에서 재랜더링되면서 쿼리 파라미터가 입력됫을경우 page값을 업데이트\n    if (query.page) {\n        page = parseInt(query.page + '');\n    }\n    const limit = 12;\n\n    const { items, total, skip } = await client.getEntries({\n        order: '-sys.createdAt',\n        skip: (page - 1) * limit,\n        limit,\n    });\n\n    return { page, items, total, skip, limit };\n}\n\nexport default Home;\n\nconst CardContainer = styled.div`\n    padding:2em 0 1em;\n    @media (max-width: 968px) {\n        padding:0.5em 0;\n    }\n`"]},"metadata":{},"sourceType":"module"}
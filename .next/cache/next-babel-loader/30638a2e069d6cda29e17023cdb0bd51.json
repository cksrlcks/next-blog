{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"/Users/chanki/react/next-blog/pages/work.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport { useRouter } from 'next/router';\nimport client from '../config';\nimport PostList from '../components/postList';\nimport Pagination from '../components/paginator';\n\nvar calculateRange = function calculateRange(length) {\n  return Array.from({\n    length: length\n  }, function (v, k) {\n    return k + 1;\n  });\n};\n\nvar Work = function Work(props) {\n  var router = useRouter();\n  var total = props.total;\n  var limit = props.limit;\n  var rangeLimit = Math.ceil(total / limit);\n  var range = calculateRange(rangeLimit);\n\n  var _useState = useState(!!props.page ? props.page : 1),\n      page = _useState[0],\n      updatePage = _useState[1];\n\n  useEffect(function () {\n    // push를 사용하면 클라이언트사이드에서 라우팅을 실행함\n    void router.push({\n      pathname: '/work',\n      query: {\n        page: page\n      }\n    });\n  }, [page]);\n  /* Pagination 컴포넌트에서의 page state의 변화 감지해서 리랜더링하기*/\n\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"list-inner\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, props.items.map(function (item) {\n    return __jsx(PostList, {\n      item: item,\n      key: item.sys.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    });\n  })), __jsx(\"div\", {\n    className: \"pagination\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, __jsx(Pagination, {\n    handlePaginationChange: function handlePaginationChange(event) {\n      return updatePage(event);\n    },\n    range: range,\n    skip: page,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  })));\n};\n\nWork.getInitialProps = function _callee(_ref) {\n  var query, page, limit, _ref2, items, total, skip;\n\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          query = _ref.query;\n          page = 1; //클라이언트사이드에서 재랜더링되면서 쿼리 파라미터가 입력됫을경우 page값을 업데이트\n\n          if (query.page) {\n            page = parseInt(query.page + '');\n          }\n\n          limit = 12;\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(client.getEntries({\n            content_type: 'workPost',\n            skip: (page - 1) * limit,\n            limit: limit\n          }));\n\n        case 6:\n          _ref2 = _context.sent;\n          items = _ref2.items;\n          total = _ref2.total;\n          skip = _ref2.skip;\n          return _context.abrupt(\"return\", {\n            page: page,\n            items: items,\n            total: total,\n            skip: skip,\n            limit: limit\n          });\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default Work;","map":{"version":3,"sources":["/Users/chanki/react/next-blog/pages/work.js"],"names":["React","useEffect","useState","useRouter","client","PostList","Pagination","calculateRange","length","Array","from","v","k","Work","props","router","total","limit","rangeLimit","Math","ceil","range","page","updatePage","push","pathname","query","items","map","item","sys","id","event","getInitialProps","parseInt","getEntries","content_type","skip"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useRouter } from 'next/router';\nimport client from '../config';\nimport PostList from '../components/postList';\nimport Pagination from '../components/paginator';\nconst calculateRange = (length) => Array.from({ length }, (v, k) => k + 1);\n\nconst Work = (props) => {\n\n    const router = useRouter();\n    const total = props.total;\n    const limit = props.limit;\n    const rangeLimit = Math.ceil(total / limit);\n    const range = calculateRange(rangeLimit);\n    const [page, updatePage] = useState(!!props.page ? props.page : 1);\n\n    useEffect(() => {\n        // push를 사용하면 클라이언트사이드에서 라우팅을 실행함\n        void router.push({ pathname: '/work', query: { page: page } })\n\n    }, [page])\n    /* Pagination 컴포넌트에서의 page state의 변화 감지해서 리랜더링하기*/\n\n    return (\n        <>\n            <div className=\"list-inner\">\n                {props.items.map(item => (\n                    <PostList item={item} key={item.sys.id} />\n                ))}\n            </div>\n            <div className=\"pagination\">\n                <Pagination handlePaginationChange={(event) => updatePage(event)} range={range} skip={page} />\n            </div>\n        </>\n    )\n}\n\nWork.getInitialProps = async ({ query }) => {\n    let page = 1;\n    //클라이언트사이드에서 재랜더링되면서 쿼리 파라미터가 입력됫을경우 page값을 업데이트\n    if (query.page) {\n        page = parseInt(query.page + '');\n    }\n    const limit = 12;\n\n    const { items, total, skip } = await client.getEntries({\n        content_type: 'workPost',\n        skip: (page - 1) * limit,\n        limit,\n    });\n\n    return { page, items, total, skip, limit };\n}\n\nexport default Work;\n"]},"metadata":{},"sourceType":"module"}